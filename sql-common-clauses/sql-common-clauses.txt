-- -- sql-common-clauses -- --

-- Part 1 Q1: Write a SQL query to return “id”, “log_feature” and “volume” 
-- from “log_feature” table by using “table alias” and “column alias.” 
-- (Note: You don’t need to use column alias on column "id".) --

SELECT lf.id, lf.log_feature as log, lf.volume as vol
FROM log_feature lf 

-- Part 2 Q1: Write a SQL query to return the first 5 rows of “id”, “resource_type” 
-- and sorted by ”id” column and "resource_type" column in ascending order.

SELECT rt.id, rt.resource_type
FROM resource_type rt
ORDER BY rt.id ASC, rt.resource_type ASC
LIMIT 5;

-- Part 2 Q2: Write a SQL query to return the last 5 rows of “id”,
-- “resource_type” and sorted by ”id” column in descending order.

SELECT rt.id, rt.resource_type
FROM resource_type rt 
ORDER BY rt.id DESC
LIMIT 5;

-- Part 2 Q3: Write a SQL query to return 5 rows of “id”, “resource_type” and sorted by 
-- ”id” column in ascending order first, then sorted by “resource_type” column in a descending order.

SELECT rt.id, rt.resource_type
FROM resource_type rt 
ORDER BY rt.id, rt.resource_type DESC
LIMIT 5;

-- Part 3 Q1: Write a SQL query to return the following data from severity_type:

SELECT 
	COUNT(*) as num_rows, 
	COUNT(DISTINCT(st.id)) as num_ids, 
	COUNT(DISTINCT(st.severity_type)) as num_severity_types
FROM severity_type st;

-- Part 4 Q1: Write a SQL query to return from the “log_feature” table, ”feature_201” with a volume between 100 and 300.

SELECT lf.id, lf.log_feature, lf.volume
FROM log_feature lf 
WHERE lf.log_feature  = 'feature 201' 
	AND lf.volume BETWEEN 100 AND 300
ORDER BY lf.volume;

